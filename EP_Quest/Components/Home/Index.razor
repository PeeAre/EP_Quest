@using Microsoft.AspNetCore.Http;
@using EP_Quest.Components.Shared
@inject LinkGenerator LGenerator
@inject IHttpContextAccessor HttpContextAccessor
@inject IConfiguration Configuration;

<Preloader IsLoading="IsLoading"></Preloader>

<div class="book-container">
    <div id="flipbook">
        <div class="hard">
            <h2 class="home-title">Your gift</h2>
            @* <a class="floating-button @_buttonVisibilityStyle" href="@LGenerator.GetPathByAction("Index", "Quest")"><span>Quest</span></a> *@
            <input disabled="@_isInputDisabled" placeholder="Enter key" class="key-input" type="text" @oninput="InputHandle" />
        </div>
        <div class="hard"></div>
        <div class="page">Page 1</div>
        <div class="page"><img id="image-2" src="images/page-1.jpg" /></div>
        <div class="page"><img id="image-3" src="images/page-1.jpg" /></div>
        <div class="page"> Page 4 </div>
        <div class="page"> Page 5 </div>
        <div class="hard"></div>
        <div class="hard"></div>
    </div>
</div>

@code {
    [Inject]
    IJSRuntime jsRuntime { get; set; }
    private bool IsLoading { get; set; } = true;
    private string _buttonVisibilityStyle = "transparent";
    private bool _isInputDisabled { get; set; }
    private string? _currentInputKeyValue = string.Empty;

    protected override void OnInitialized()
    {
        Init();
        jsRuntime.InvokeVoidAsync("bookInit");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await Task.Delay(1000);
            IsLoading = false;
            StateHasChanged();
        }
    }

    private void Init()
    {
            StateHasChanged();
    }

    private async Task InputHandle(ChangeEventArgs ev)
    {
        _currentInputKeyValue = ev.Value?.ToString();

        if (_currentInputKeyValue == Configuration["Phrases:Key phrase"])
        {
            await jsRuntime.InvokeVoidAsync("enableTurn");
            await jsRuntime.InvokeVoidAsync("nextPage");
            _isInputDisabled = true;
        }

        // if (_currentInputKeyValue == Configuration["Phrases:Key phrase"])
        // {
        //     HttpContextAccessor?.HttpContext?.Response.Cookies.Append("KeyPhrase", "phrase");
        // }
    }
            }