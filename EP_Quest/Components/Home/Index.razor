@using Microsoft.AspNetCore.Http;
@using EP_Quest.Components.Shared
@using EP_Quest.Models
@using Microsoft.EntityFrameworkCore
@inject LinkGenerator LGenerator
@inject IHttpContextAccessor HttpContextAccessor
@inject IConfiguration Configuration;
@inject IQuestRepository Repository

<Preloader IsLoading="IsLoading"></Preloader>

<div class="book-container">
    @if (_isInitialized)
    {
        <div id="flipbook">
            <div class="hard">
                <div class="title-container">
                    <h2 class="home-title">Journey of</h2>
                    <h2 style="@_nameTitleVisibilityStyle" class="name-title">Beautiful Demon</h2>
                </div>
                <input style="@_inputVisibilityStyle" placeholder="Enter key" class="key-input" type="text" @oninput="InputHandle" />
            </div>
            <div class="hard">
                <h3 class="inner-congratulation">Be like a Rose</h3>
            </div>

            @foreach (var step in Steps)
            {
                var imageId = "image-" + step.Number;
                var imagePath = "images/pages/page1/" + step.Number + ".jpg";

                <div class="page">
                    @if (!step.IsLocked)
                    {
                        <div class="image-container">
                            <img id=@imageId src=@imagePath />
                        </div>
                        <div class="text-container">
                            @step.Content
                        </div>
                    }
                    else
                    {
                        <div class="lock"></div>
                    }
                    <div class="page-number">
                        @{
                            var pageNumber = step.Number.ToString();
                        }
                        @pageNumber
                    </div>
                </div>
            }
            <div class="hard"></div>
            <div class="hard"></div>
        </div>
    }
</div>

@code {
    private bool _isInitialized = false;
    [Inject]
    IJSRuntime jsRuntime { get; set; }
    private List<Step> Steps { get; set; }
    private bool IsLoading { get; set; } = true;
    private string _nameTitleVisibilityStyle = "display: none";
    private string _inputVisibilityStyle = "display: inline";
    private string? _currentInputKeyValue = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await Init();
        jsRuntime.InvokeVoidAsync("bookInit");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await Task.Delay(1000);
            IsLoading = false;
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task Init()
    {
        Steps = await Repository.Steps.OrderBy(x => x.Number).ToListAsync();
        _isInitialized = true;
        await InvokeAsync(StateHasChanged);
    }

    private async Task InputHandle(ChangeEventArgs ev)
    {
        _currentInputKeyValue = ev.Value?.ToString();

        if (_currentInputKeyValue == Configuration["Phrases:Key phrase"])
        {
            await jsRuntime.InvokeVoidAsync("enableTurn");
            await jsRuntime.InvokeVoidAsync("nextPage");
            _nameTitleVisibilityStyle = "display: inline";
            _inputVisibilityStyle = "display: none";
        }

        // if (_currentInputKeyValue == Configuration["Phrases:Key phrase"])
        // {
        //     HttpContextAccessor?.HttpContext?.Response.Cookies.Append("KeyPhrase", "phrase");
        // }
    }

    [JSInvokable]
    public static void Refresh()
    {
        var a = 2;
    }

    
}