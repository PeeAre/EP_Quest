@using EP_Quest.Models
@using EP_Quest.Services.Common
@using Microsoft.EntityFrameworkCore
@inject IQuestRepository Repository
@inject NotificationService NService

<div class="progress-container">
    <div class="info-container">
        <div class="progress-section">
            <span>Progress</span>
            <div class="battery">
                @if (IsInitialized)
                {
                    @foreach (var step in _steps)
                    {
                        var stepStyle = "divider";

                        if (step.IsDone)
                        {
                            stepStyle += " active-divider";
                        }

                        <div class="@stepStyle"></div>
                    }
                }
            </div>
        </div>
        @if (_timeUntilEnd != null)
        {
            <div class="time-section">
                <span>Time left</span>
                <div>@_timeUntilEnd</div>
            </div>
        }
    </div>
    <div class="help-section">
        @if (_timeUntilEnd != null && !_currentStep.TimeWasAdded)
        {
            _isTimeAddingActive = "active";
        }
        else
        {
            _isTimeAddingActive = null;
        }
        <div class="clock @_isTimeAddingActive" @onclick="AddStepTime"></div>
        <div class="phone" @onclick="ToFriendCalling"></div>
    </div>
</div>

@code {
    private List<Models.Step> _steps;
    private Models.Step _currentStep;
    private string? _timeUntilEnd;
    private string? _isTimeAddingActive;
    private Timer? _checkingTimer;
    private bool IsInitialized = false;

    [Parameter]
    public EventCallback ToFriendCalling { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await Init();
        NService.SubscribeNotification(TimeResetHandle);
        IsInitialized = true;
    }
    public async Task Init()
    {
        _steps = await Repository.Steps.OrderBy(x => x.Number).ToListAsync();
        _currentStep = _steps.FirstOrDefault(x => !x.IsLocked && !x.IsDone);
        _checkingTimer = new Timer(ShowTime, null, 0, 1000);
    }

    public async Task AddStepTime()
    {
        await Repository.Steps.Where(x => !x.IsLocked && !x.IsDone)
            .ForEachAsync(x =>
            {
                x.Duration = x.Duration.Add(new System.TimeSpan(4, 0, 0));
                x.TimeWasAdded = true;
            });
        await Repository.SaveChangesAsync();
        Repository.UpdateContext();
    }

    public async Task TimeResetHandle(NotificationName notificationName, object? obj = null)
    {
        Repository.UpdateContext();

        if (notificationName == NotificationName.StepTimeReset)
            await Init();

        await InvokeAsync(StateHasChanged);
    }
    private void ShowTime(object _)
    {
        _timeUntilEnd = _currentStep == null ? null : _currentStep.IsActive ? _currentStep.Duration
            .Subtract(DateTime.Now.ToUniversalTime()
            .Subtract((DateTime)_currentStep.Start))
            .ToString(@"dd\:hh\:mm\:ss")
            : null;
        InvokeAsync(StateHasChanged);
    }
    public void Dispose()
    {
        _checkingTimer?.Dispose();
    }
}
