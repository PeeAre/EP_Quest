@using EP_Quest.Models
@using EP_Quest.Services.Common
@using Microsoft.EntityFrameworkCore
@inject IQuestRepository Repository
@inject NotificationService NService

<div class="quest-container">
    @if (IsInitialized)
    {
        @Content
    }
</div>
<div class="buttons-container">
    <button class="nav-button" @onclick="FromQuestToDashboard">To dashboard</button>
    <button class="nav-button" @onclick="Done">Done</button>
</div>

@code {
    [Parameter]
    public EventCallback FromQuestToDashboard { get; set; }
    private string Content { get; set; } = string.Empty;
    private bool IsInitialized { get; set; } = false;

    protected override void OnInitialized()
    {
        Init();
        NService.SubscribeNotification(HandleContent);
    }
    public void Init()
    {
        IsInitialized = true;
    }
    public async Task HandleContent(NotificationName notificationName, object? obj = null)
    {
        if (notificationName == NotificationName.UpdateQuestContent)
        {
            Content = ((Step)obj).Content;
            Repository.UpdateContext();
            Init();
            await InvokeAsync(StateHasChanged);
        }
    }
    private async Task Done()
    {
        var nextStepNumber = Repository.Steps.FirstOrDefault(x => x.IsActive)!.Number + 1;

        await Repository.Steps.Where(x => x.IsActive)
            .ForEachAsync(x =>
        {
            x.IsActive = false;
            x.IsDone = true;
            x.Start = null;
        });
        await Repository.Steps.Where(x => x.Number == nextStepNumber)
            .ForEachAsync(x =>
        {
            x.IsLocked = false;
            x.Start = null;
        });
        await Repository.SaveChangesAsync();
        NService.ReleaseNotification(NotificationName.StepTimeReset);
        NService.ReleaseNotification(NotificationName.UnlockNextStep);
        await FromQuestToDashboard.InvokeAsync();
    }
}
