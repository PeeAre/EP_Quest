@using EP_Quest.Models
@using EP_Quest.Services.Common
@using Microsoft.EntityFrameworkCore
@inject IQuestRepository Repository
@inject NotificationService NService

<div class="quest-container">
    @if (IsInitialized)
    {
        @_currentStep.Content
    }
</div>
<div class="buttons-container">
    <button class="nav-button" @onclick="FromQuestToDashboard">To dashboard</button>
    <button class="nav-button" @onclick="Done">Done</button>
</div>

@code {
    [Parameter]
    public EventCallback FromQuestToDashboard { get; set; }
    private Step _currentStep { get; set; }
    private bool IsInitialized = false;

    protected override async Task OnInitializedAsync()
    {
        await Init();
    }
    public async Task Init()
    {
        _currentStep = await Repository.Steps.FirstOrDefaultAsync(x => x.IsCurrent);
        IsInitialized = true;
    }
    private async Task Done()
    {
        var steps = Repository.Steps;
        var stepNumber = steps.FirstOrDefault(x => x.IsCurrent)?.Number + 1;

        if (stepNumber == null)
            throw new Exception();

        await steps.Where(x => x.IsCurrent || x.Number == stepNumber).ForEachAsync(x =>
        {
            x.IsCurrent = !x.IsCurrent;
            x.IsLocked = false;
        });
        await steps.Where(x => x.Number == stepNumber - 1).ForEachAsync(x =>
        {
            x.IsDone = true;
            x.Start = null;
        });
        await Repository.SaveChangesAsync();
        NService.ReleaseNotification(NotificationName.StepTimeReset);
        NService.ReleaseNotification(NotificationName.UnlockNextStep);
        await FromQuestToDashboard.InvokeAsync();
    }
}
