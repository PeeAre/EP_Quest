@using EP_Quest.Models
@using EP_Quest.Services.Common
@using Microsoft.EntityFrameworkCore
@inject IQuestRepository Repository
@inject NotificationService NService

<div id="step-container" class="step-container">
    @if (IsInitialized)
    {
        <div class="some-c">
            <img id="image-1" src="images/page-1.jpg"/>
        </div>
        @* <div class="grid-wrapper">
            <div class="first-frame @_frameVisibility[0]">
            </div>
            <div class="second-frame @_frameVisibility[2]">
            </div>
            <div class="third-frame @_frameVisibility[1]">
            </div>
            <div class="instruction-scroll @_scrollVisibility" @onclick="ShowStepInstruction"></div>
        </div> *@
    }
    <div id="step-info">
        <div style="padding: 1rem; @_instructionVisibility">
            Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.
        </div>
    </div>
</div>
<div class="buttons-container">
    <button class="nav-button" @onclick="ToDashboard">To dashboard</button>
    <button class="nav-button" @onclick="Done">Done</button>
</div>

@code {
    [Inject]
    IJSRuntime jsRuntime { get; set; }
    [Parameter]
    public EventCallback FromQuestToDashboard { get; set; }
    private Timer? _fadeInTimer;
    private string Content { get; set; } = string.Empty;
    private bool IsInitialized { get; set; } = false;
    private string[] _frameVisibility { get; set; } = new[] { "transparent", "transparent", "transparent" };
    private string _scrollVisibility { get; set; }
    private int _visibleFrameIndex { get; set; }
    private string _instructionVisibility { get; set; }

    protected override void OnInitialized()
    {
        Init();
        NService.SubscribeNotification(HandleContent);
    }
    public void Init()
    {
        IsInitialized = true;
        _visibleFrameIndex = 0;
        _scrollVisibility = "transparent";
        _instructionVisibility = "display: none;";

        for (var i = 0; i < _frameVisibility.Length; i++)
        {
            _frameVisibility[i] = "transparent";
        }
    }

    public async Task ShowStepInstruction()
    {
        _instructionVisibility = "display: block;";
        _scrollVisibility = "transparent";
        await InvokeAsync(StateHasChanged);
        await Task.Delay(40);
        await jsRuntime.InvokeVoidAsync("scrollToElement", "step-container", "step-info");
    }
    private void FadeInFrame(object _)
    {
        _frameVisibility[_visibleFrameIndex++] = "fade-in";
        if (_visibleFrameIndex < _frameVisibility.Length)
            _fadeInTimer = new Timer(FadeInFrame, null, 1000, 0);
        else if (_visibleFrameIndex == _frameVisibility.Length)
        {
            _scrollVisibility = "fade-in";
        }
        InvokeAsync(StateHasChanged);
    }
    public async Task HandleContent(NotificationName notificationName, object? obj = null)
    {
        if (notificationName == NotificationName.UpdateQuestContent)
        {
            Content = ((Models.Step)obj).Content;
            Repository.UpdateContext();
            Init();
            _fadeInTimer = new Timer(FadeInFrame, null, 800, 0);
            await InvokeAsync(StateHasChanged);
        }
    }
    private async Task ToDashboard()
    {
        await FromQuestToDashboard.InvokeAsync();
        Init();
    }
    private async Task Done()
    {
        var nextStepNumber = Repository.Steps.FirstOrDefault(x => x.IsActive)!.Number + 1;

        await Repository.Steps.Where(x => x.IsActive)
            .ForEachAsync(x =>
        {
            x.IsActive = false;
            x.IsDone = true;
            x.Start = null;
        });
        await Repository.Steps.Where(x => x.Number == nextStepNumber)
            .ForEachAsync(x =>
        {
            x.IsLocked = false;
            x.Start = null;
        });
        await Repository.SaveChangesAsync();
        NService.ReleaseNotification(NotificationName.StepTimeReset);
        NService.ReleaseNotification(NotificationName.UnlockNextStep);
        await FromQuestToDashboard.InvokeAsync();
        Init();
    }
    public void Dispose()
    {
        _fadeInTimer?.Dispose();
    }
}
