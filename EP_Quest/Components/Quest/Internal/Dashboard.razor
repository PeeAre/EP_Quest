@using EP_Quest.Models
@using EP_Quest.Services.Common
@using Microsoft.EntityFrameworkCore
@using System.Text.RegularExpressions
@inject IQuestRepository Repository
@inject NotificationService NService
@inject IConfiguration Configuration;

<div class="steps-container">
    <div class="steps-wrapper">
        @if (_isInitialized)
        {
            @foreach (var step in Steps)
            {
                <div class="step @step.StatusIdentifier @step.Selection"
                     @onmouseover="() => HoverCard(true, step)"
                     @onmouseout="() => HoverCard(false)"
                     @onclick="() => SelectCard(step.Get().Number)">
                    @step.Get().Name
                </div>
            }
        }
    </div>
    <div class="result-phrase">@_resultPhrase</div>
</div>
<div class="description-section">
    <span class="description-text">
        @StepDescription
    </span>
    <div class="buttons-container">
        <div class="nav-button" @onclick="ToInstructions">Instructions</div>
        @if (IsPlayButtonVisible)
        {
            <div class="nav-button" @onclick="PlayStep">Play</div>
        }
    </div>
</div>

@code {
    private bool _isInitialized = false;
    private string _resultPhrase;

    struct Step
    {
        public string StatusIdentifier { get; set; }
        public string Selection { get; set; } = string.Empty;

        private Models.Step Model { get; set; }


        public Step(Models.Step model)
        {
            Model = model;
            StatusIdentifier = Model.IsDone ? "done" : Model.IsLocked ? "lock" : "unlock";
        }
        public Step(Models.Step model, string selection) : this(model)
        {
            Selection = selection;
        }
        public Models.Step Get() => Model;
    }

    [Parameter]
    public EventCallback ToInstructions { get; set; }
    [Parameter]
    public EventCallback ToSelectedStep { get; set; }

    private List<Step> Steps { get; set; }
    private string StepDescription { get; set; } = string.Empty;
    private Step SelectedStep { get; set; } = default;
    private bool IsPlayButtonVisible { get; set; } = false;
    private string[] _phraseArray = new[] { "Be like", "a rose,", "beautiful", "demon" };

    protected override async Task OnInitializedAsync()
    {
        await Init();
        NService.SubscribeNotification(HandleRefresh);
        _isInitialized = true;
    }
    public async Task Init()
    {
        StepDescription = string.Empty;
        SelectedStep = default;
        IsPlayButtonVisible = false;
        Steps = await Repository.Steps.OrderBy(x => x.Number).Select(x => new Step(x)).ToListAsync();
        var isDoneIndex = 0;

        foreach (var step in Steps)
        {
            if (step.Get().IsDone)
                isDoneIndex++;
        }

        var startSegment = new ArraySegment<string>(_phraseArray, 0, isDoneIndex);
        var startSting = string.Join(" ", startSegment);
        var endSegment = new ArraySegment<string>(_phraseArray, isDoneIndex,
            _phraseArray.Length - isDoneIndex);
        var endString = string.Join(" ", endSegment);
        string pattern = @"([A-Z]|[a-z])";
        string replacement = "_";
        Regex rgx = new Regex(pattern);
        endString = rgx.Replace(endString, replacement);
        _resultPhrase = string.Join(" ", startSting, endString);
    }
    public async Task HandleRefresh(NotificationName notificationName, object? obj = null)
    {
        if (notificationName == NotificationName.UnlockNextStep)
        {
            Repository.UpdateContext();
            await Init();
        }

        await InvokeAsync(StateHasChanged);
    }
    private void HoverCard(bool isOver, Step step = default)
    {
        if (isOver)
        {
            StepDescription = step.Get().IsLocked ? "***" : step.Get().Description;
            return;
        }

        StepDescription = string.Empty;

        for (var i = 0; i < Steps.Count; i++)
            if (Steps[i].Selection != string.Empty)
                StepDescription = Steps[i].Get().IsLocked ? string.Empty : Steps[i].Get().Description;
    }
    private void SelectCard(int stepNumber)
    {
        if (Steps.Any(x => x.Get().Number == stepNumber && x.Get().IsLocked))
            return;

        for (int i = 0; i < Steps.Count(); i++)
        {
            if (Steps[i].Selection != string.Empty)
                Steps[i] = new Step(Steps[i].Get(), string.Empty);

            if (Steps[i].Get().Number == stepNumber)
            {
                if (!SelectedStep.Equals(default(Step)))
                {
                    if (SelectedStep.Get().Number == stepNumber)
                    {
                        SelectedStep = default;
                        IsPlayButtonVisible = false;
                        break;
                    }
                }

                if (Steps[i].Get().IsDone)
                    IsPlayButtonVisible = false;
                else
                    IsPlayButtonVisible = true;

                Steps[i] = SelectedStep = new Step(Steps[i].Get(), "selected-step");
            }
        }
    }
    private async Task PlayStep()
    {
        await Repository.Steps.Where(x => x.Number == SelectedStep.Get().Number)
            .ForEachAsync(x =>
            {
                if (!x.IsActive)
                {
                    x.IsActive = true;
                    x.Start = DateTime.Now.ToUniversalTime();
                }
            });
        await Repository.SaveChangesAsync();
        await ToSelectedStep.InvokeAsync();
        NService.ReleaseNotification(NotificationName.StepTimeReset);
        NService.ReleaseNotification(NotificationName.UpdateQuestContent, SelectedStep.Get());
    }
}
