@using EP_Quest.Models
@using Microsoft.EntityFrameworkCore

<div class="@_instructionRotation">
    <div class="front-side">
        <div class="instruction-container @_currentNoteOpacity">
            @((MarkupString)_instruction)
        </div>
        <div class="buttons-container">
            <button id="back-button" class="nav-button" style="visibility: @_backButtonVisibility" @onclick="ToPreviousPage">Back</button>
            <button id="next-button" class="nav-button" @onclick="ToNextPage">@_nextButtonText</button>
        </div>
    </div>
    <div class="back-side">
        <div class="cards">
            @for (var i = 0; i < _steps.Count; i++)
            {
                var step = _steps[i];
                var stepNumber = step.Name;
                var lockedClass = step.IsLocked ? "lock" : "unlock";
                <div class="card @_cards[i] @lockedClass" @onmouseover="() => HoverCard(step.Number - 1)" @onmouseout="() => HoverCard(-1)" @onclick="() => SelectStep(step.Number - 1)">@stepNumber</div>
            }
        </div>
        <div class="description-section">
            <span class="description-text">
                @_stepDescription
            </span>
            <div class="buttons-container">
                <div class="brush-back-button" @onclick="ToBeginInstruction"></div>
                <button id="result-phrase-button" class="nav-button">Result phrase</button>
                <div class="brush-back-button" @onclick="ToSelectedStep"></div>
            </div>
        </div>
    </div>
    <div class="third-side">
        <div class="instruction-container">
            <span>Third side</span>
            <div class="buttons-container">
                <button class="nav-button" @onclick="ToDashboard">Dashboard</button>
            </div>
        </div>
    </div>
</div>

@code {
    [Inject]
    public IQuestRepository Repository { get; set; }
    private Instruction[] _instructions;
    private int _instructionIndex;
    private string _instruction = string.Empty;
    private List<Step> _steps;
    private string[] _cards = new string[8];
    private string _stepDescription = string.Empty;
    private string _currentNoteOpacity = "transparent-block";
    private string _backButtonVisibility = "hidden";
    private string _nextButtonText = "Next";
    private bool _canStartQuest;
    private int _focusedCard = -1;
    private string _selectedCard = "selected-card";
    private string _selectedCardDescription = "";
    private string _instructionRotation = "";

    protected override void OnInitialized()
    {
        _instructions = Repository.Instructions.OrderBy(instruction => instruction.Id).ToArray();
        _steps = Repository.Steps.OrderBy(step => step.Id).ToList();
        _currentNoteOpacity = "visible-block";

        if (_instructions.Length > 0)
        {
            _instruction = _instructions[_instructionIndex].Content;
        }
    }
    private async Task ToPreviousPage()
    {
        _instructionIndex = _instructionIndex > 0 ? _instructionIndex - 1 : _instructionIndex;
        _instruction = _instructions[_instructionIndex].Content;
        _currentNoteOpacity = "transparent-block";
        _nextButtonText = "Next";
        _canStartQuest = false;

        if (_instructionIndex == 0)
            _backButtonVisibility = "hidden";

        await Task.Delay(200);
        _currentNoteOpacity = "visible-block";
    }
    private async Task ToNextPage()
    {
        _currentNoteOpacity = "transparent-block";

        if (_canStartQuest)
        {
            _instructionRotation = "rotate";
            return;
        }

        _instructionIndex = _instructionIndex < _instructions.Length - 1 ? _instructionIndex + 1 : _instructionIndex;
        _instruction = _instructions[_instructionIndex].Content;
        _backButtonVisibility = "visible";

        if (_instructionIndex == _instructions.Length - 1)
        {
            _nextButtonText = "Let's start the quest";
            _canStartQuest = true;
        }

        await Task.Delay(200);
        _currentNoteOpacity = "visible-block";
    }
    private async Task ToBeginInstruction()
    {
        _instructionIndex = 0;
        _instruction = _instructions[_instructionIndex].Content;
        _instructionRotation = "";
        _nextButtonText = "Next";
        _canStartQuest = false;
        _backButtonVisibility = "hidden";
        await Task.Delay(200);
        _currentNoteOpacity = "visible-block";
    }
    private void ToSelectedStep()
    {
        _instructionRotation = "qwe";
        _backButtonVisibility = "hidden";

    }
    private void ToDashboard()
    {
        _instructionRotation = "rotate";
    }
    private void HoverCard(int index)
    {
        if (index == -1)
        {
            _stepDescription = _focusedCard == -1 ? string.Empty :
                _steps.FirstOrDefault(step => step.Number == _focusedCard + 1).IsLocked ?
                    "***" :
                    _steps.FirstOrDefault(step => step.Id == _focusedCard + 1).Description;
            return;
        }

        var stepId = index + 1;
        Step? step = _steps.FirstOrDefault(step => step.Id == stepId);
        _stepDescription = !step.IsLocked ? step.Description : "***";
    }
    private void SelectStep(int index)
    {
        if (_focusedCard != -1)
            _cards[_focusedCard] = string.Empty;

        _focusedCard = index;
        _cards[_focusedCard] = "selected-card";
        var stepId = index + 1;
        var step = _steps.FirstOrDefault(step => step.Id == stepId);
        _selectedCardDescription = step != null ? step.Description : string.Empty;
        HoverCard(index);
    }
}
